
	let user_client_id = "509581293681-q82nlbr0pfdg29enqcs0e47k2mcbjjj8.apps.googleusercontent.com";
	
		window.gapiCallbacks=[];

		function gapiLoaded(){
			gapi.auth.init(function() {
				gapi.client.load('drive', 'v2').then(function () {
					var GapiQueue = function () {
						this.push = function (callback) {
							setTimeout(callback, 0);
						};
					};

					var _old_gapiCallbacks = window.gapiCallbacks;

					window.gapiCallbacks = new GapiQueue();

					_old_gapiCallbacks.forEach(function (callback) {
						window.gapiCallbacks.push(callback);
					});
				},function(reason){
					console.err(reason);
				});
			});
		}
	
'use strict';

angular.module('driveApp', [])
    .controller('driveController', function($scope,gapiAuthService,driveService) {

        //Auth

        $scope.checkingLogin=true;
        gapiAuthService.checkLogin().then(function(){
            $scope.loggedIn= true;
        },function(){
            $scope.loggedIn= false;
        }).finally(function(){
            $scope.checkingLogin=false;
        });

        $scope.login=function(){
            gapiAuthService.login().then(function(){
                $scope.loggedIn=true;
            },function(authResult){
                $scope.loggedIn = false;
                console.err(authResult);
            })
        };

        //Drive

        $scope.images=[];

        $scope.clickFileUpload=function(){
            document.getElementById('uploadImage').click();
        };

        $scope.upload=function(){
            $scope.uploading=true;
            var allFiles=document.getElementById('uploadImage').files;
            var file=allFiles[0];

            driveService.insertFile(file, file.name).then(function(link){
                if(document.querySelector('#ws-i-l')){
                  document.querySelector('#ws-i-l').value=link;
                }
                
            }).finally(function(){
                $scope.uploading=false;
            });
        }

    });

'use strict';

angular.module('driveApp')
    .factory('gapiAuthService', function ($q) {
        var client_id= user_client_id;
        var scope=['https://www.googleapis.com/auth/drive.file'];

        function getConfig(immediate){
            return {
                'client_id': client_id,
                'scope': scope,
                immediate: immediate
            }
        }

        function isTokenNeedsRefresh(token){
            return !token || moment.duration(moment(token.expires_at*1000).valueOf()-moment().valueOf()).minutes()<10;
        }

        return {
            checkLogin:function(){
                var deferred = $q.defer();

                gapiCallbacks.push(function () {
                    if (isTokenNeedsRefresh(gapi.auth.getToken())) {
                        gapi.auth.authorize(getConfig(true), function (authResult) {
                            if (authResult && !authResult.error) {
                                deferred.resolve(gapi.auth.getToken().access_token);
                            } else {
                                deferred.reject(authResult);
                            }
                        })
                    } else {
                        deferred.resolve(gapi.auth.getToken().access_token);
                    }
                });

                return deferred.promise;
            },

            login:function() {
                var deferred = $q.defer();

                this.checkLogin().then(function (accessToken) {
                    deferred.resolve(accessToken);
                }, function () {
                    gapi.auth.authorize(getConfig(false), function (authResult) {
                        if (authResult && !authResult.error) {
                            deferred.resolve(gapi.auth.getToken().access_token);
                        } else {
                            deferred.reject(authResult);
                        }
                    })
                });

                return deferred.promise;
            }
        }


    });

'use strict';

angular.module('driveApp')
    .factory('driveService', function ($q,gapiAuthService) {
        function createFolder(){
            return gapi.client.drive.files.insert(
                {
                    'resource':{
                        "title":'3schools.in',
                        "mimeType": "application/vnd.google-apps.folder"
                    }
                }
            )
        }

        function ensureUploadFolderPresent(){
            return gapi.client.drive.files.list(
                {q:"mimeType = 'application/vnd.google-apps.folder' and trashed = false"}
            ).then(function(files){
                var directory=files.result.items;

                if(!directory.length){
                    return createFolder().then(function(res){
                        return res.result;
                    });
                }else{
                    return directory[0];
                }
            });
        }

       function insertFile(fileData, filename,parentId) {
            var deferred = $q.defer();

            var boundary = '3schools';
            var delimiter = "\r\n--" + boundary + "\r\n";
            var close_delim = "\r\n--" + boundary + "--";

            var reader = new FileReader();
            reader.readAsBinaryString(fileData);
            reader.onload = function (e) {
                var contentType = fileData.type || 'application/octet-stream';
                var metadata = {
                    'title': filename,
                    'mimeType': contentType,
                    "parents": [{"id":parentId}]
                };

                var base64Data = btoa(reader.result);
                var multipartRequestBody =
                    delimiter +
                    'Content-Type: application/json\r\n\r\n' +
                    JSON.stringify(metadata) +
                    delimiter +
                    'Content-Type: ' + contentType + '\r\n' +
                    'Content-Transfer-Encoding: base64\r\n' +
                    '\r\n' +
                    base64Data +
                    close_delim;

                var request = gapi.client.request({
                    'path': '/upload/drive/v2/files',
                    'method': 'POST',
                    'params': {'uploadType': 'multipart'},
                    'headers': {
                        'Content-Type': 'multipart/mixed; boundary="' + boundary + '"'
                    },
                    'body': multipartRequestBody});
                request.then(function(file){
                    deferred.resolve(file.result);
                },function(reason){
                    deferred.reject(reason);
                });
            };

            return deferred.promise;
        }

        function waitForFileToBecomeActive(fileId){
            var deferred = $q.defer();

            gapi.client.request({
                'path': '/drive/v2/files/'+fileId,
                'method': 'GET'
            }).then(function(){
                deferred.resolve();
            },function(){
                setTimeout(function(){
                    waitForFileToBecomeActive(fileId).then(function(){
                        deferred.resolve();
                    },function(reason){
                        deferred.reject(reason);
                    })
                },1000);
            });

            return deferred.promise;
        }

        function insertPermission(file){
          
            return gapi.client.drive.permissions.insert({
                'fileId': file.id,
                'resource': {
                    "withLink": true,
                    "role": "reader",
                    "type": "anyone"
                }
            })
        }

        return {
            insertFile: function (fileData, filename) {
                return gapiAuthService.login()
                    .then(function(){
                        return ensureUploadFolderPresent();
                    }).then(function(directory){
                        return insertFile(fileData,filename,directory.id);
                    }).then(function(file){
                        return waitForFileToBecomeActive(file.id).then(function(){
                            return insertPermission(file).then(function(){
                                return file.webContentLink;
                            });
                        });
                    });
            }
        }
    });
